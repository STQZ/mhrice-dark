use once_cell::sync::Lazy;
use std::collections::HashMap;

// Originally dumped from Ghidra from demo ExeFS, then updated with some newer value
// TODO: do a thorough check again with the latest ExeFS
// The suffix list for a particular file format is ordered that the latest version comes first
pub static SUFFIX_MAP: Lazy<HashMap<&'static str, &'static [u32]>> = Lazy::new(|| {
    let mut m: HashMap<&'static str, &'static [u32]> = HashMap::new();
    m.insert("scn", &[0x14]);
    m.insert("pfb", &[0x11]);
    m.insert("user", &[2]);
    m.insert("uvar", &[2]);
    m.insert("hapvib", &[0x6bb788fe]);
    m.insert("psop", &[1]);
    m.insert("sdf", &[0x77a4cbdd]);
    m.insert("mmtr", &[0x77da5e9d, 0x77a4cbdd]);
    m.insert("mmtrs", &[0x77da5e9d, 0x77a4cbdd]);
    m.insert("vsdf", &[0x77da5e9e, 0x77a4cbde]);
    m.insert("tex", &[0x1c]);
    m.insert("rtex", &[5]);
    m.insert("rcfg", &[3]);
    m.insert("sss", &[2]);
    m.insert("lod", &[3]);
    m.insert("rtmr", &[3]);
    m.insert("mesh", &[0x77b089b0]);
    m.insert("gpbf", &[1]);
    m.insert("mdf2", &[0x13]);
    m.insert("ies", &[2]);
    m.insert("sst", &[5]);
    m.insert("prb", &[9]);
    m.insert("dblc", &[1]);
    m.insert("pci", &[2]);
    m.insert("scns", &[1]);
    m.insert("lmap", &[2]);
    m.insert("lprb", &[6]);
    m.insert("fsm", &[0x10]);
    m.insert("cdef", &[3]);
    m.insert("cfil", &[7]);
    m.insert("cmat", &[3]);
    m.insert("mcol", &[0x2723]);
    m.insert("clsm", &[0xf]);
    m.insert("rcol", &[0x12]);
    m.insert("cset", &[1]);
    m.insert("ccbk", &[1]);
    m.insert("terr", &[0x2718]);
    m.insert("trtd", &[0xbbc]);
    m.insert("fsmv2", &[0x28]);
    m.insert("bhvt", &[0x28]);
    m.insert("clip", &[0x28]);
    m.insert("tml", &[0x9c41]);
    m.insert("ucurve", &[0x28]);
    m.insert("dlgtml", &[40000]);
    m.insert("tmlfsm2", &[0x262f641]);
    m.insert("tmlbld", &[0x9c44]);
    m.insert("ucurvelist", &[0x28]);
    m.insert("dlgtmllist", &[40000000]);
    m.insert("mot", &[0x1c8]);
    m.insert("motblend", &[0x1c8]);
    m.insert("mottree", &[10]);
    m.insert("jmap", &[0x10]);
    m.insert("jointlodgroup", &[2]);
    m.insert("motcam", &[8]);
    m.insert("mcamlist", &[0x11]);
    m.insert("motlist", &[0x1e4]);
    m.insert("motbank", &[3]);
    m.insert("mcambank", &[3]);
    m.insert("motfsm", &[0x11]);
    m.insert("motfsm2", &[0x2a]);
    m.insert("gpumotlist", &[0x1c9]);
    m.insert("chain", &[0x23]);
    m.insert("ikspinecg", &[1]);
    m.insert("ikleg2", &[0xc]);
    m.insert("ikls", &[5]);
    m.insert("skeleton", &[3]);
    m.insert("fbxskel", &[3]);
    m.insert("jcns", &[0xe]);
    m.insert("retarget", &[5]);
    m.insert("ikbodyrig", &[1]);
    m.insert("iklookat", &[2]);
    m.insert("iklookat2", &[8]);
    m.insert("ikdamage", &[4]);
    m.insert("iktrain", &[4]);
    m.insert("rtbs", &[4]);
    m.insert("rbsl", &[1]);
    m.insert("retargetrig", &[4]);
    m.insert("fbik", &[6]);
    m.insert("bnk", &[2]);
    m.insert("wcb", &[1]);
    m.insert("wel", &[0xb]);
    m.insert("wms", &[5]);
    m.insert("wpi", &[3]);
    m.insert("pck", &[3]);
    m.insert("wss", &[2]);
    m.insert("wfa", &[2]);
    m.insert("wid", &[2]);
    m.insert("wcbk", &[3]);
    m.insert("wcc", &[2]);
    m.insert("wcfe", &[2]);
    m.insert("wcgp", &[5]);
    m.insert("wcggp", &[1]);
    m.insert("wcsgp", &[1]);
    m.insert("wgs", &[2]);
    m.insert("wcja", &[3]);
    m.insert("wcjm", &[1]);
    m.insert("wcjr", &[2]);
    m.insert("wcmo", &[3]);
    m.insert("wcmsw", &[4]);
    m.insert("wcms", &[2]);
    m.insert("wcmts", &[2]);
    m.insert("wcp", &[3]);
    m.insert("wcrd", &[5]);
    m.insert("wcrb", &[5]);
    m.insert("wcsa", &[2]);
    m.insert("wcsf", &[1]);
    m.insert("wcss", &[2]);
    m.insert("wcst", &[5]);
    m.insert("wcsw", &[5]);
    m.insert("wcswn", &[2]);
    m.insert("wct", &[2]);
    m.insert("wcta", &[3]);
    m.insert("wcv", &[3]);
    m.insert("wcjmv", &[2]);
    m.insert("wcd", &[1]);
    m.insert("wfc", &[1]);
    m.insert("wcr", &[1]);
    m.insert("wem", &[2]);
    m.insert("wtos", &[1]);
    m.insert("wtot", &[3]);
    m.insert("wlqg", &[2]);
    m.insert("uvs", &[7]);
    m.insert("efx", &[0x280223]);
    m.insert("lfa", &[4]);
    m.insert("fxct", &[4]);
    m.insert("eem", &[0]);
    m.insert("guisd", &[1]);
    m.insert("gui", &[0x61a96]);
    m.insert("gcf", &[0x18]);
    m.insert("gcp", &[1]);
    m.insert("gsty", &[1]);
    m.insert("oft", &[1]);
    m.insert("ift", &[2]);
    m.insert("fslt", &[2]);
    m.insert("tean", &[1]);
    m.insert("svgn", &[3]);
    m.insert("svgsq", &[1]);
    m.insert("msg", &[0x11]);
    m.insert("dlglist", &[0]);
    m.insert("dlg", &[2]);
    m.insert("aimap", &[0x28]);
    m.insert("filter", &[1]);
    m.insert("aimapattr", &[0x29]);
    m.insert("ainvm", &[8]);
    m.insert("aivspc", &[4]);
    m.insert("aiwayp", &[3]);
    m.insert("ainvmmgr", &[2]);
    m.insert("aivspcmgr", &[2]);
    m.insert("nar", &[1]);
    m.insert("nmr", &[0xf]);
    m.insert("ncf", &[5]);
    m.insert("rfl", &[1]);
    m.insert("pup", &[0]);
    m.insert("mov", &[1]);
    m.insert("auto", &[4]);
    m.insert("areamap", &[8]);
    m.insert("areaquery", &[2]);
    m.insert("nnfp", &[1]);
    m.insert("spt", &[0x6bf3afba]);
    m.insert("spf", &[0x6be4bb9a]);
    m.insert("stmesh", &[2]);
    m.insert("path", &[0]);
    m.insert("lform", &[7]);
    m.insert("fol", &[0]);
    m.insert("gp", &[0]);
    m.insert("layergrid", &[7]);

    m
});
